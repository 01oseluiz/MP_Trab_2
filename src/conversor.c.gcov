        -:    0:Source:conversor.c
        -:    0:Graph:conversor.gcno
        -:    0:Data:conversor.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "conversor.h"
        -:    2:
       36:    3:int computaNumero (int *simbolos){
       36:    4:    int numero = 0; //valor de saida
        -:    5:    int i;//var controle
        -:    6:    
        -:    7:    /*Percore ao inverso o vetor de inteiros (simbolos), computando os valores*/
      153:    8:    for(i=simbolos[0]; i>0; i--){
      117:    9:        if(i==1 || simbolos[i] <= simbolos[i-1]){
       90:   10:            numero +=simbolos[i];
        -:   11:        }
       27:   12:        else if(simbolos[i]>simbolos[i-1]){
       27:   13:            numero +=(simbolos[i] - simbolos[i-1]);
       27:   14:            i--;
        -:   15:        }
        -:   16:    }
        -:   17:    
       36:   18:    free(simbolos); //ponteiro criado na funcao posterior
       36:   19:    return numero;
        -:   20:}
        -:   21:
       37:   22:int* transformaArabico (char *roman){
        -:   23:    int i;//var controle
        -:   24:    int *numeros;
        -:   25:
       37:   26:    numeros = (int *) malloc((strlen(roman)+1)*sizeof(int));
       37:   27:    numeros[0] = strlen(roman);
        -:   28:
      188:   29:    for(i=1; i<=strlen(roman); i++){
        -:   30:        
      151:   31:        switch(roman[i-1]){
        -:   32:            case 'I':
       28:   33:                numeros[i] = 1;
       28:   34:                break;
        -:   35:            case 'V':
        7:   36:                numeros[i] = 5;
        7:   37:                break;
        -:   38:            case 'X':
       47:   39:                numeros[i] = 10;
       47:   40:                break;
        -:   41:            case 'L':
       11:   42:                numeros[i] = 50;
       11:   43:                break;
        -:   44:            case 'C':
       22:   45:                numeros[i] = 100;
       22:   46:                break;
        -:   47:            case 'D':
        9:   48:                numeros[i] = 500;
        9:   49:                break;
        -:   50:            case 'M':
       26:   51:                numeros[i] = 1000;
       26:   52:                break;
        -:   53:        }
        -:   54:    }
        -:   55:
       37:   56:    return numeros;
        -:   57:}
        -:   58:
       37:   59:int* subdivideNumero(int numero){
        -:   60:    int *sub_numeros;
        -:   61:    
       37:   62:    sub_numeros = (int *) malloc(4*sizeof(int));
        -:   63:    
       37:   64:    sub_numeros[0] = (numero / 1000);
       37:   65:    sub_numeros[1] = (numero%1000)/100;
       37:   66:    sub_numeros[2] = ((numero%1000)%100)/10;
       37:   67:    sub_numeros[3] = (((numero%1000)%100)%10);
        -:   68:    
       37:   69:    return sub_numeros;
        -:   70:}
        -:   71:
       36:   72:char* transformaRomano(int* sub_numeros){
        -:   73:    int i;
        -:   74:    
       36:   75:    char centenas[10][5] = {"","C","CC","CCC","CD","D","DC","DCC","DCCC","CM"};
       36:   76:    char dezenas[10][5] = {"","X","XX","XXX","XL","L","LX","LXX","LXXX","XC"};
       36:   77:    char unidades[10][5] = {"","I","II","III","IV","V","VI","VII","VIII","IX"};
        -:   78:    
        -:   79:    char *numeroRomano;
       36:   80:    numeroRomano = (char*) malloc(30*sizeof(char));
        -:   81:    
       58:   82:    for(i=0; i<sub_numeros[0]; i++){                    //Adiciona simbologia de milhares caso haja
       22:   83:        numeroRomano[i] = 'M';
        -:   84:    }
       36:   85:    numeroRomano[i] = '\0';
        -:   86:    
       36:   87:    strcat(numeroRomano, centenas[sub_numeros[1]]);     //Concatena centenas
       36:   88:    strcat(numeroRomano, dezenas[sub_numeros[2]]);      //dezenas
       36:   89:    strcat(numeroRomano, unidades[sub_numeros[3]]);     //e unidades
        -:   90:    
       36:   91:    free(sub_numeros); //Ponteiro criado na funcao anterior
        -:   92:    
       36:   93:    numeroRomano = (char*) realloc(numeroRomano, strlen(numeroRomano)*sizeof(char));
       36:   94:    return numeroRomano;
        -:   95:}
        -:   96:
       36:   97:int converteArabico(char *simbolos_entrada){
        -:   98:    int i;
        -:   99:    int Numero;
        -:  100:    char *check_simbolos, simbolos[30];
        -:  101:    
       36:  102:    strcpy(simbolos, simbolos_entrada); // Copia todos os dados para uma varial estatica
        -:  103:    
      173:  104:    for(i=0; i<strlen(simbolos); i++){              // Converte para maiusculo
      138:  105:        if(simbolos[i]>=65 && simbolos[i]<=122)     // Verifica se são letras
      137:  106:            simbolos[i] = toupper(simbolos[i]);
        -:  107:        else
        1:  108:            return -1;
        -:  109:    }
        -:  110:    
       35:  111:    Numero = computaNumero(transformaArabico(simbolos));            //Converte numero romano em arabico
       35:  112:    check_simbolos = transformaRomano(subdivideNumero(Numero));     //Converte numero arabico obtido acima para romano
        -:  113:    
       35:  114:    if(strcmp(simbolos,check_simbolos) == 0 && Numero <=3000){      //Compara tamanho maximo do número permitido (3000)
       25:  115:        free(check_simbolos);                                       //e semelhanca entre valor esperado e obtido para fins de prova real
       25:  116:        return Numero;
        -:  117:    }
        -:  118:    else{
       10:  119:        free(check_simbolos);
       10:  120:        return -1;
        -:  121:    }
        -:  122:
        -:  123:}
